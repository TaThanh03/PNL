=============================Ex1==================================

Question 1: 

make nconfig -> Kernel hacking -> KGDB: kernel debugger 


Question 2: 

Moyen de communication: TCP client-server, port 1234


Question 3, 5, 6:

1. start VM
2. dans machine hôte, /linux-4.9.86 "gdb vmlinux"
3. dans machine hôte, démarrer GDB, tapper "target remote :1234" -> démarrer le client GDB
4. dans VM, "echo g > /proc/sysrq-trigger" -> démarrer le serveur KGDB
5. ping-pong entre client GDB et server KGDB avec les commands "continue" et "echo g > /proc/sysrq-trigger"


Question 4:

monitor ps est de plus haut niveau, donnant des informations comme pid, ppid, la commande utilisée. Orienté processus.
Info thread se focalise sur les threads. 

=============================Ex2==================================

Question 1: 

Variable init_uts_ns est initialisée dans /init/version.c
Elle contient des champs suivants: sysname, nodename, release, version, machine, domainname


Question 2:

(gdb) print init_uts_ns

$1 = {kref = {refcount = {counter = 4}}, name = {
    sysname = "Linux", '\000' <repeats 59 times>, 
    nodename = "pnl-tp", '\000' <repeats 58 times>, 
    release = "4.9.86", '\000' <repeats 58 times>, 
    version = "#2 SMP Thu Mar 8 17:36:55 CET 2018", '\000' <repeats 30 times>, machine = "x86_64", '\000' <repeats 58 times>, 
    domainname = "(none)", '\000' <repeats 58 times>}, 
  user_ns = 0xffffffff8225cc40 <init_user_ns>, 
  ucounts = 0x0 <irq_stack_union>, ns = {stashed = {counter = 0}, 
    ops = 0xffffffff81c30c00 <utsns_operations>, inum = 4026531838}}

(gdb) set variable init_uts_ns.name.sysname = "BLABLA"

(gdb) print init_uts_ns

$2 = {kref = {refcount = {counter = 4}}, name = {
    sysname = "BLABLA", '\000' <repeats 58 times>, 
    nodename = "pnl-tp", '\000' <repeats 58 times>, 
    release = "4.9.86", '\000' <repeats 58 times>, 
    version = "#2 SMP Thu Mar 8 17:36:55 CET 2018", '\000' <repeats 30 times>, machine = "x86_64", '\000' <repeats 58 times>, 
    domainname = "(none)", '\000' <repeats 58 times>}, 
  user_ns = 0xffffffff8225cc40 <init_user_ns>, 
  ucounts = 0x0 <irq_stack_union>, ns = {stashed = {counter = 0}, 
    ops = 0xffffffff81c30c00 <utsns_operations>, inum = 4026531838}}

=============================Ex3==================================

Question 1:

/**
 * kthread_run - create and wake a thread.
 * @threadfn: the function to run until signal_pending(current).
 * @data: data ptr for @threadfn.
 * @namefmt: printf-style name for the thread.
 *
 * Description: Convenient wrapper for kthread_create() followed by
 * wake_up_process().  Returns the kthread or ERR_PTR(-ENOMEM).
 */
/**
 * my_hanging_fn - set current state of the thread to TASK_UNINTERRUPTIBLE
 */
/**
 * schedule_timeout - sleep until timeout 
 * TASK_UNINTERRUPTIBLE - at least timeout jiffies are guaranteed to
 * pass before the routine returns. The routine will return 0
 */
https://stackoverflow.com/questions/223644/what-is-an-uninterruptable-process
TASK_UNINTERRUPTIBLE, the uninterruptible sleep. If a task is marked with this flag, it is not expecting to be woken up by anything other than whatever it is waiting for, either because it cannot easily be restarted, or because programs are expecting the system call to be atomic. This can also be used for sleeps known to be very short.


Question 2:

La thread de module devrait être bloquée pendant une minute.

La tâche crashe.
INFO: task my_hanging_fn:329 blocked for more than 30 seconds.
Explication: la tâche devient non-interruptible et jamais reveillée.


Question 3: 

make nconfig -> Kernel hacking -> Debug Lockups and Hangs -> Panic (Reboot On Hung Tasks


Question 4:

/le résultat de backtrace
#0  kgdb_breakpoint () at kernel/debug/debug_core.c:1072
#1  0xffffffff811e4f62 in kgdb_panic_event (
    self=0xffffffff822771b0 <kgdb_panic_event_nb>, val=0, 
    data=0xffffffff827c7bc0 <buf>) at kernel/debug/debug_core.c:850
#2  0xffffffff8115fe5c in notifier_call_chain (
    nl=0xffffffff822771b0 <kgdb_panic_event_nb>, val=0, 
    v=0xffffffff827c7bc0 <buf>, nr_to_call=-1, 
    nr_calls=0x0 <irq_stack_union>) at kernel/notifier.c:93
#3  0xffffffff8115ff1a in __atomic_notifier_call_chain (
    nr_calls=<optimized out>, nr_to_call=<optimized out>, 
    v=<optimized out>, val=<optimized out>, nh=<optimized out>)
    at kernel/notifier.c:183
#4  atomic_notifier_call_chain (
    nh=0xffffffff822771b0 <kgdb_panic_event_nb>, val=0, 
    v=0xffffffff827c7bc0 <buf>) at kernel/notifier.c:193
#5  0xffffffff81238522 in panic (
    fmt=0xffffffff81ece926 "hung_task: blocked tasks")
    at kernel/panic.c:213
#6  0xffffffff811efc18 in check_hung_task (timeout=<optimized out>, 
    t=<optimized out>) at kernel/hung_task.c:126
#7  check_hung_uninterruptible_tasks (timeout=<optimized out>)
    at kernel/hung_task.c:182
#8  watchdog (dummy=0xffffffff822771b0 <kgdb_panic_event_nb>)
    at kernel/hung_task.c:239
#9  0xffffffff8115e7b9 in kthread (_create=0xffff88003d8f9440)
    at kernel/kthread.c:211
#10 0xffffffff81b42c37 in ret_from_fork ()
    at arch/x86/entry/entry_64.S:374
#11 0x0000000000000000 in ?? ()

Question 5:

//le résultat de monitor ps
Task Addr               Pid   Parent [*] cpu State Thread             Command
0xffff88003d8a3200       15        2  1    0   R  0xffff88003d8a3b80 *khungtaskd

0xffff88003e378000        1        0  0    0   S  0xffff88003e378980  systemd
0xffff88003d8a3200       15        2  1    0   R  0xffff88003d8a3b80 *khungtaskd
0xffff88003d95d780       28        2  0    0   R  0xffff88003d95e100  kworker/0:1
0xffff88003db20000      198        1  0    0   R  0xffff88003db20980  systemd-journal
0xffff88003dbbcb00      208        1  0    0   S  0xffff88003dbbd480  systemd-udevd
0xffff88003b6ebe80      258        1  0    0   S  0xffff88003b6ec800  systemd-logind
0xffff88003b6e9900      260        1  0    0   S  0xffff88003b6ea280  dbus-daemon
0xffff88003b6ecb00      261        1  0    0   S  0xffff88003b6ed480  login
0xffff88003db13200      272        1  0    0   S  0xffff88003db13b80  login
0xffff88003db11900      273        1  0    0   S  0xffff88003db12280  systemd
0xffff88003b6ef080      284      273  0    0   S  0xffff88003b6efa00  (sd-pam)
0xffff88003db14b00      300      261  0    0   S  0xffff88003db15480  bash
0xffff88003db15780      314      272  0    0   S  0xffff88003db16100  bash
0xffff88003b6ea580      337        2  0    0   D  0xffff88003b6eaf00  my_hanging_fn

//le résultat de monitor btp


Question 6:

Seconde addresse correspond au lieu où le module est chargé.


Question 7:

La solution qui ne modifie que le module:
set_current_state(TASK_INTERRUPTIBLE);

=============================Ex4==================================

Question 1:

Il y a la liste des timers &prdebug_timer. Son champ data = kstat_cpu(0).irqs_sum. 0 car il s'agit de processeur numéro 0. irqs_sum est le nombre de irqs depuis le début. On y supprime le nombre précédent pour avoir la valeur exacte pendant le dernier créneau.

Rien n'est affiché parce que DDEBUG n'est pas activé. Il faut ajouter la ligne suivante dans le Makefile :

CFLAGS_prdebug.o := -DDEBUG

Question 2:

echo -n 'module prdebug +p' > /sys/kernel/debug/dynamic_debug/control

Le fichier de control est modifié. +p veut dire qu'on veut activer tous les messages du module dont le nom suit "module", dans ce cas prdebug.

Question 3:

echo -n 'module prdebug +pmfl' > /sys/kernel/debug/dynamic_debug/control

Question 4:

echo -n 'module prdebug line 13 +pmfl' > /sys/kernel/debug/dynamic_debug/control

=============================Ex5==================================

Question 1:
 
Un nouveau thread est créé. Il va s'occuper d'afficher, tous les 10 sezcondes, le status du CPU qui est sauvegardé dans le struct my_kcpustat.

Question 2:

Le module crashe.

Question 3:
- Le résultat de backtrace n’est pas exploitable:
(gdb) backtrace 
#0  0xffffffffa00001ef in ?? ()
#1  0x000000000000000f in irq_stack_union ()
#2  0x0000000000000000 in ?? ()

- On fait "monitor lsmod":
Module                  Size  modstruct     Used by
kcpustat                2342  0xffffffffa00004c0    0  (Live) 0xffffffffa0000000 [ ]

- Chargez les symboles de votre module (le fichier .o) en indiquant à KGDB l’adresse de chargement du module:
add-symbol-file ../PNL-master/tp5/EXO-05/kcpustat.o 0xffffffffa0000000

- Le résultat de backtrace est exploitable:
(gdb) backtrace 
#0  print_stats () at /home/ta/workplace/PNL/PNL-master/tp5/EXO-05/kcpustat.c:75
#1  0xffffffffa0000320 in my_kcpustat_fn (data=0xdead000000000100) at /home/ta/workplace/PNL/PNL-master/tp5/EXO-05/kcpustat.c:102
#2  0xffffffff8115e7b9 in kthread (_create=0xffff88003b53d780) at kernel/kthread.c:211
#3  0xffffffff81b42c37 in ret_from_fork () at arch/x86/entry/entry_64.S:374
#4  0x0000000000000000 in ?? ()

Question 4:
La ligne 75 de code du module kcpustat pose problème.
